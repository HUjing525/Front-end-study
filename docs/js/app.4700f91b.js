(function(t){function e(e){for(var a,c,d=e[0],u=e[1],i=e[2],o=0,O=[];o<d.length;o++)c=d[o],Object.prototype.hasOwnProperty.call(l,c)&&l[c]&&O.push(l[c][0]),l[c]=0;for(a in u)Object.prototype.hasOwnProperty.call(u,a)&&(t[a]=u[a]);r&&r(e);while(O.length)O.shift()();return b.push.apply(b,i||[]),n()}function n(){for(var t,e=0;e<b.length;e++){for(var n=b[e],a=!0,d=1;d<n.length;d++){var u=n[d];0!==l[u]&&(a=!1)}a&&(b.splice(e--,1),t=c(c.s=n[0]))}return t}var a={},l={app:0},b=[];function c(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.m=t,c.c=a,c.d=function(t,e,n){c.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},c.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},c.t=function(t,e){if(1&e&&(t=c(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)c.d(n,a,function(e){return t[e]}.bind(null,a));return n},c.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return c.d(e,"a",e),e},c.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},c.p="";var d=window["webpackJsonp"]=window["webpackJsonp"]||[],u=d.push.bind(d);d.push=e,d=d.slice();for(var i=0;i<d.length;i++)e(d[i]);var r=u;b.push([0,"chunk-vendors"]),n()})({0:function(t,e,n){t.exports=n("56d7")},"0391":function(t,e,n){t.exports=n.p+"img/study.05e912dd.png"},"56d7":function(t,e,n){"use strict";n.r(e);n("e260"),n("e6cf"),n("cca6"),n("a79d");var a=n("7a23"),l={id:"app"};function b(t,e,n,b,c,d){var u=Object(a["N"])("router-view");return Object(a["E"])(),Object(a["i"])("div",l,[Object(a["n"])(u)])}var c={name:"App"};n("fd44");c.render=b;var d=c,u=n("3fd4"),i=(n("7dd6"),n("6c02")),r=n("0391"),o=n.n(r),O=Object(a["gb"])("data-v-2e56cff0");Object(a["H"])("data-v-2e56cff0");var j={id:"hello"},v=Object(a["n"])("div",{id:"hi"},[Object(a["n"])("img",{alt:"Vue logo",src:o.a})],-1),p=Object(a["n"])("h1",{id:"title"}," Welcome to My Front-end Study Notes",-1),f={id:"hi"},s=Object(a["m"])("START");Object(a["F"])();var h=O((function(t,e,n,l,b,c){var d=Object(a["N"])("el-button"),u=Object(a["N"])("router-link");return Object(a["E"])(),Object(a["i"])("div",j,[v,p,Object(a["n"])("div",f,[Object(a["n"])(u,{to:"/home"},{default:O((function(){return[Object(a["n"])(d,{round:""},{default:O((function(){return[s]})),_:1})]})),_:1})])])})),T={name:"HelloWorld",props:{}};n("c435");T.render=h,T.__scopeId="data-v-2e56cff0";var P=T,m=Object(a["gb"])("data-v-6fbc5630");Object(a["H"])("data-v-6fbc5630");var _=Object(a["n"])("img",{src:o.a,alt:""},null,-1),S=Object(a["n"])("span",null,"前端学习笔记",-1),H=Object(a["n"])("i",{class:"el-icon-pear"},null,-1),g=Object(a["n"])("span",null,"计算机网络",-1),C=Object(a["m"])("应用层"),x=Object(a["m"])("传输层"),N=Object(a["m"])("网络层"),I=Object(a["m"])("数据链路层"),y=Object(a["m"])("物理层"),M=Object(a["n"])("i",{class:"el-icon-grape"},null,-1),D=Object(a["n"])("span",null,"HTML",-1),L=Object(a["m"])("介绍"),E=Object(a["m"])("总结"),w=Object(a["n"])("i",{class:"el-icon-orange"},null,-1),F=Object(a["n"])("span",null,"CSS",-1),U=Object(a["m"])("介绍"),A=Object(a["m"])("总结"),R=Object(a["n"])("i",{class:"el-icon-cherry"},null,-1),q=Object(a["n"])("span",null,"JavaScript",-1),X=Object(a["m"])("介绍"),k=Object(a["m"])("总结"),W=Object(a["n"])("i",{class:"el-icon-apple"},null,-1),G=Object(a["n"])("span",null,"数据结构",-1),J=Object(a["m"])("数组"),K=Object(a["m"])("栈、队列"),Y=Object(a["m"])("链表"),B=Object(a["m"])("集合、字典"),V=Object(a["n"])("i",{class:"el-icon-watermelon"},null,-1),z=Object(a["n"])("span",null,"Vue",-1),Q=Object(a["m"])("介绍");Object(a["F"])();var Z=m((function(t,e,n,l,b,c){var d=Object(a["N"])("el-header"),u=Object(a["N"])("el-menu-item"),i=Object(a["N"])("el-submenu"),r=Object(a["N"])("el-menu"),o=Object(a["N"])("el-aside"),O=Object(a["N"])("router-view"),j=Object(a["N"])("el-main"),v=Object(a["N"])("el-container");return Object(a["E"])(),Object(a["i"])("div",null,[Object(a["n"])(v,{class:"container"},{default:m((function(){return[Object(a["n"])(d,null,{default:m((function(){return[_,S]})),_:1}),Object(a["n"])(v,null,{default:m((function(){return[Object(a["n"])(o,{width:b.isCollapse?"64px":"200px"},{default:m((function(){return[Object(a["n"])("div",{class:"toggle-button",onClick:e[1]||(e[1]=function(){return c.toggleCollapse&&c.toggleCollapse.apply(c,arguments)})},"|||"),Object(a["n"])(r,{"text-color":"#333","active-text-color":"red","unique-opened":!0,"collapse-transition":"false",collapse:b.isCollapse,router:!0},{default:m((function(){return[Object(a["n"])(i,{index:"1"},{title:m((function(){return[H,g]})),default:m((function(){return[Object(a["n"])(u,{index:"1-1"},{default:m((function(){return[C]})),_:1}),Object(a["n"])(u,{index:"1-2"},{default:m((function(){return[x]})),_:1}),Object(a["n"])(u,{index:"1-3"},{default:m((function(){return[N]})),_:1}),Object(a["n"])(u,{index:"1-4"},{default:m((function(){return[I]})),_:1}),Object(a["n"])(u,{index:"1-5"},{default:m((function(){return[y]})),_:1})]})),_:1}),Object(a["n"])(i,{index:"2"},{title:m((function(){return[M,D]})),default:m((function(){return[Object(a["n"])(u,{index:"2-1"},{default:m((function(){return[L]})),_:1}),Object(a["n"])(u,{index:"2-2"},{default:m((function(){return[E]})),_:1})]})),_:1}),Object(a["n"])(i,{index:"3"},{title:m((function(){return[w,F]})),default:m((function(){return[Object(a["n"])(u,{index:"3-1"},{default:m((function(){return[U]})),_:1}),Object(a["n"])(u,{index:"3-2"},{default:m((function(){return[A]})),_:1})]})),_:1}),Object(a["n"])(i,{index:"4"},{title:m((function(){return[R,q]})),default:m((function(){return[Object(a["n"])(u,{index:"4-1"},{default:m((function(){return[X]})),_:1}),Object(a["n"])(u,{index:"4-2"},{default:m((function(){return[k]})),_:1})]})),_:1}),Object(a["n"])(i,{index:"5"},{title:m((function(){return[W,G]})),default:m((function(){return[Object(a["n"])(u,{index:"5-1"},{default:m((function(){return[J]})),_:1}),Object(a["n"])(u,{index:"5-1"},{default:m((function(){return[K]})),_:1}),Object(a["n"])(u,{index:"5-1"},{default:m((function(){return[Y]})),_:1}),Object(a["n"])(u,{index:"5-1"},{default:m((function(){return[B]})),_:1})]})),_:1}),Object(a["n"])(i,{index:"6"},{title:m((function(){return[V,z]})),default:m((function(){return[Object(a["n"])(u,{index:"6-1"},{default:m((function(){return[Q]})),_:1})]})),_:1})]})),_:1},8,["collapse"])]})),_:1},8,["width"]),Object(a["n"])(j,null,{default:m((function(){return[Object(a["n"])(O)]})),_:1})]})),_:1})]})),_:1})])})),$={name:"home",props:{},data:function(){return{isCollapse:!1}},methods:{toggleCollapse:function(){this.isCollapse=!this.isCollapse}}};n("e927");$.render=Z,$.__scopeId="data-v-6fbc5630";var tt=$,et=Object(a["gb"])("data-v-2309b75a");Object(a["H"])("data-v-2309b75a");var nt=Object(a["l"])('<h2 data-v-2309b75a>应用层</h2><p data-v-2309b75a>含义：应用层协议定义了应用进程间的交互和通信规则。</p><h3 data-v-2309b75a>HTTP协议</h3><p data-v-2309b75a>含义：HTTP是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。</p><p data-v-2309b75a>特点： <ol data-v-2309b75a><li data-v-2309b75a>HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li><li data-v-2309b75a>有会话的，可以使用cookies保存一小段数据。</li></ol></p><p data-v-2309b75a>连接模式： <ul data-v-2309b75a><li data-v-2309b75a>非持久连接：服务器必须为每一个请求的对象建立和维护一个全新的连接。</li><li data-v-2309b75a>持久连接：TCP 连接默认不关闭，可以被多个请求复用。</li></ul></p><h4 data-v-2309b75a>HTTP请求报文</h4><p data-v-2309b75a>HTTP请求报文含三部分：请求行、首部行、实体主体</p><p class="a" data-v-2309b75a>请求行包含：方法字段、URL字段和 HTTP版本字段</p>',9),at=Object(a["n"])("div",{class:"b"},[Object(a["n"])("table",{class:"c",border:"1",cellspacing:"0",cellpadding:"5",width:"500",height:"220"},[Object(a["n"])("thead",null,[Object(a["n"])("tr",null,[Object(a["n"])("th",null,"方法字段"),Object(a["n"])("th",null,"含义")])]),Object(a["n"])("tbody",null,[Object(a["n"])("tr",null,[Object(a["n"])("td",null,"GET"),Object(a["n"])("td",null,"请求服务器发送某个资源，请求不含实体主体，是安全的，幂等的。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"POST"),Object(a["n"])("td",null,"将实体提交到指定的资源，通常通过HTML表单发送，并返回服务器的修改结果。不安全，非幂等的。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"PUT"),Object(a["n"])("td",null,"用请求有效载荷替换目标资源的所有当前表示。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"PATCH"),Object(a["n"])("td",null,"用于对资源进行部分修改。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"CONNECT"),Object(a["n"])("td",null,"建立一个由客户端到目标资源标识的服务器的隧道。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"HEAD"),Object(a["n"])("td",null,"请求一个与GET请求的响应相同的响应，但没有响应体。")])])])],-1),lt=Object(a["n"])("h4",null,"HTTP响应报文",-1),bt=Object(a["n"])("p",null,"HTTP响应报文含三部分：状态行、首部行、实体主体",-1),ct=Object(a["n"])("p",{class:"c"},"状态行包含：HTTP版本字段、状态码、相应的状态信息",-1),dt=Object(a["n"])("ul",{class:"d"},[Object(a["n"])("li",null,"1XX:代表服务器接收到请求"),Object(a["n"])("li",null,"2XX:代表成功"),Object(a["n"])("li",null,"3XX:代表重定向"),Object(a["n"])("li",null,"4XX:代表客户端错误"),Object(a["n"])("li",null,"5XX:代表服务器端错误")],-1),ut=Object(a["n"])("div",{class:"e"},[Object(a["n"])("table",{class:"c",border:"1",cellspacing:"0",cellpadding:"5",width:"500",height:"220"},[Object(a["n"])("thead",null,[Object(a["n"])("tr",null,[Object(a["n"])("th",null,"状态码"),Object(a["n"])("th",null,"英文名称"),Object(a["n"])("th",null,"中文描述")])]),Object(a["n"])("tbody",null,[Object(a["n"])("tr",null,[Object(a["n"])("td",null,"100"),Object(a["n"])("td",null,"continue"),Object(a["n"])("td",null,"一切正常，服务器可以继续发送请求。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"200"),Object(a["n"])("td",null,"OK"),Object(a["n"])("td",null,"请求成功")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"202"),Object(a["n"])("td",null,"Accepted"),Object(a["n"])("td",null,"已经接受请求，但未响应。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"204"),Object(a["n"])("td",null,"No Content"),Object(a["n"])("td",null,"服务器成功处理，但未返回实体主体。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"301"),Object(a["n"])("td",null,"Moved Permanently"),Object(a["n"])("td",null,"永久移动。请求的资源已被永久的移动到新URI，今后任何新的请求都应使用新的URI代替。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"302"),Object(a["n"])("td",null,"Found"),Object(a["n"])("td",null,"临时移动。请求的资源只是临时被移动。客户端之后的请求应继续使用原有URI。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"304"),Object(a["n"])("td",null,"Not Modified"),Object(a["n"])("td",null,"所请求的资源未修改，服务器不会返回任何资源，但客户端可以使用缓存中的内容。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"204"),Object(a["n"])("td",null,"No Content"),Object(a["n"])("td",null,"服务器成功处理，但未返回实体主体。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"307"),Object(a["n"])("td",null,"Temporary Redirect"),Object(a["n"])("td",null,"临时重定向。与302类似。但307可以确保请求方法和实体主体不变。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"308"),Object(a["n"])("td",null,"Permanent Redirect"),Object(a["n"])("td",null,"永久重定向。与301类似。但308可以确保请求方法和实体主体不变。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"400"),Object(a["n"])("td",null,"Bad Request"),Object(a["n"])("td",null,"客户端请求的语法错误，服务器无法理解。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"404"),Object(a["n"])("td",null,"Not Found"),Object(a["n"])("td",null,"服务器未找到请求的资源。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"500"),Object(a["n"])("td",null,"Internal Server Error"),Object(a["n"])("td",null,"客服务器内部出错。")]),Object(a["n"])("tr",null,[Object(a["n"])("td",null,"503"),Object(a["n"])("td",null,"Service Unavailable "),Object(a["n"])("td",null,"由于超载或系统维护，服务器暂时的无法处理客户端的请求。（即服务器未准备好处理请求）")])])])],-1),it=Object(a["l"])("<h4 data-v-2309b75a>HTTP/1.0</h4><p data-v-2309b75a>特点：采用非持久连接，服务器必须为每次请求的对象建立和维护一个全新的连接。</p><h4 data-v-2309b75a>HTTP/1.1</h4><p data-v-2309b75a>特点：采用持久连接，多个请求可以复用同一个 TCP 连接。</p><p data-v-2309b75a>缺点：数据请求的通信次序 是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许 多请求排队等待的情况，这种情况被称为“队头堵塞”。</p><p data-v-2309b75a>解决办法： <ul data-v-2309b75a><li data-v-2309b75a>减少请求数</li><li data-v-2309b75a>同时打开多个持久连接</li></ul></p><h4 data-v-2309b75a>HTTP/2</h4><p data-v-2309b75a>目的：主要解决 HTTP/1.1 效率不高的问题。</p><p data-v-2309b75a>新特性：</p><ul data-v-2309b75a><li data-v-2309b75a>二进制协议 <p data-v-2309b75a>在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为&quot;帧&quot;，可以分为头信息帧和数据帧。它是实现多路复用的基础。</p></li><li data-v-2309b75a>多路复用 <p data-v-2309b75a>在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了&quot;队头堵塞&quot;的问题。</p></li><li data-v-2309b75a>数据流 <p data-v-2309b75a>将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流 ID ，用来区分它属于哪个数据流。</p></li><li data-v-2309b75a>头信息压缩 <p data-v-2309b75a>一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面， 客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</p></li><li data-v-2309b75a>服务器推送 <p data-v-2309b75a>允许服务器未经请求，主动向客户端发送静态资源资源。</p></li></ul><h3 data-v-2309b75a>HTTPS协议</h3><p data-v-2309b75a>含义：HTTPS 指的是超文本传输安全协议，HTTPS 是基于 HTTP 协议的，不过它会使用 TLS/SSL 来对数据加密。使用 TLS/ SSL 协议，所有的信息都是加密的，第三方没有办法窃听。并且它提供了一种校验机制，信息一旦被篡改，通信的双方会立刻发现。它还配备了身份证书，防止身份被冒充的情况出现。</p><p data-v-2309b75a>TLS握手过程：</p><ul data-v-2309b75a><li data-v-2309b75a>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</li><li data-v-2309b75a>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</li><li data-v-2309b75a>客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服务器。然后服务器使用自己的私钥，来解密客户端发送过来的随机数。</li><li data-v-2309b75a>客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li></ul><h3 data-v-2309b75a>DNS协议</h3><p data-v-2309b75a>含义：DNS 协议提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。</p><p data-v-2309b75a>递归查询和迭代查询：</p><ul data-v-2309b75a><li data-v-2309b75a>我们向本地 DNS 服务器发送请求的方式就是递归查询。</li><li data-v-2309b75a>本地 DNS 服务器向其他域名服务器请求的过程是迭代查询的过程。</li></ul><p data-v-2309b75a>DNS 缓存：</p><p data-v-2309b75a>含义：当某个 DNS 服务器接收到一个 DNS 回答后，它能够将回答中的信息缓存在本地存储器中。</p>",20);Object(a["F"])();var rt=et((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[nt,at,lt,bt,ct,dt,ut,it])})),ot={name:"application",props:{}};n("88a7");ot.render=rt,ot.__scopeId="data-v-2309b75a";var Ot=ot,jt=Object(a["gb"])("data-v-11bb2285");Object(a["H"])("data-v-11bb2285");var vt=Object(a["l"])("<h2 data-v-11bb2285>传输层</h2><p data-v-11bb2285>含义：传输层协议主要是为不同主机上的不同进程间提供了逻辑通信的功能。</p><h3 data-v-11bb2285>多路复用和多路分解：</h3><ul data-v-11bb2285><li data-v-11bb2285>一个信道同时传输多路信号是多路复用。</li><li data-v-11bb2285>将多路信号交付给对应的接收端是多路分解。</li></ul><p data-v-11bb2285>无连接的多路复用和多路分解指的是 UDP 套接字的分配过程，一个 UDP 套接字由一个二元组来标识，这个二元组包含了一个目的地址和一个目的端口号。</p><p data-v-11bb2285>面向连接的多路复用和多路分解指的是 TCP 套接字的分配过程，一个 TCP 套接字由一个四元组来标识，这个四元组包含了源 IP 地址、源端口号、目的地址和目的端口号。</p><h3 data-v-11bb2285>UDP协议</h3><p data-v-11bb2285>含义：UDP 是一种无连接的，不可靠的传输层协议。</p><p data-v-11bb2285>特点：</p><ul data-v-11bb2285><li data-v-11bb2285>使用 UDP 时，在发送报文段之前，通信双方没有握手的过程，因此 UDP 被称为是无连接的传输层协议。</li><li data-v-11bb2285>UDP 协议不保证数据的可靠交付。</li></ul><p data-v-11bb2285>UDP 报文段结构：</p><p data-v-11bb2285>UDP 报文段由首部和应用数据组成。报文段首部包含四个字段，分别是源端口号、目的端口号、长度和检验和。</p><h3 data-v-11bb2285>TCP协议</h3><p data-v-11bb2285>含义：TCP 协议是面向连接的，提供可靠数据传输服务的传输层协议。</p><p data-v-11bb2285>特点：</p><ul data-v-11bb2285><li data-v-11bb2285>TCP 协议是面向连接的，在通信双方进行通信前，需要通过三次握手建立连接。</li><li data-v-11bb2285>TCP 协议通过序号、确认号、定时重传、检验和等机制，来提供可靠的数据传输服务。</li><li data-v-11bb2285>TCP 提供了流量控制机制和拥塞控制机制。</li></ul><h3 data-v-11bb2285>TCP三次握手过程</h3><ol data-v-11bb2285><li data-v-11bb2285>客户端向服务器发送一个 SYN 连接请求报文段以及客户端数据的初始序号。</li><li data-v-11bb2285>服务器端接收到客户端发送的 SYN 连接请求报文段后，向客户端发送 SYN ACK 报文段以及服务器端数据的初始序号。</li><li data-v-11bb2285>客户端接收到服务器的肯定应答后，它也会为这次 TCP 连接分配缓存和变量，同时向服务器端发送一个对服务器端的报文段的确认。</li></ol><h3 data-v-11bb2285>TCP四次挥手过程</h3><ol data-v-11bb2285><li data-v-11bb2285>客户端认为没有数据要再发送给服务器端，它就向服务器发送一个 FIN 报文段，申请断开客户端到服务器端的连接。发送后客户端进入 FIN_WAIT_1 状态。</li><li data-v-11bb2285>服务器端接收到客户端释放连接的请求后，向客户端发送一个确认报文段，表示已经接收到了客户端释放连接的请求，以后不再接收客户端发送过来的数据。但是因为连接是全双工的，所以此时，服务器端还可以向客户端发送数据。服务器端进入 CLOSE_WAIT 状态。客户端收到确认后，进入 FIN_WAIT_2 状态。</li><li data-v-11bb2285>服务器端发送完所有数据后，向客户端发送 FIN 报文段，申请断开服务器端到客户端的连接。发送后进入 LAS T_ACK 状态。</li><li data-v-11bb2285>客户端接收到 FIN 请求后，向服务器端发送一个确认应答，并进入 TIME_WAIT 阶段。该阶段会持续一段时间， 这个时间为报文段在网络中的最大生存时间，如果该时间内服务端没有重发请求的话，客户端进入 CLOSED 的状态。如果收到服务器的重发请求就重新发送确认报文段。服务器端收到客户端的确认报文段后就进入 CLOSED 状态，这样全双工的连接就被释放了。</li></ol><h3 data-v-11bb2285>TCP的可靠运输机制</h3><ul data-v-11bb2285><li data-v-11bb2285>TCP 的可靠运输机制是基于连续 ARQ 协议和滑动窗口协议的。</li><li data-v-11bb2285>TCP就是通过调整发送窗口的大小来控制发送速率，发送窗口的大小根据网络的拥塞程度动态变化。</li><li data-v-11bb2285>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。</li></ul><h3 data-v-11bb2285>TCP流量控制机制</h3><p data-v-11bb2285>目的：控制发送方的发送速率，保证接收方来得及接收。</p><p data-v-11bb2285>方法：接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据 接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。</p><h3 data-v-11bb2285>TCP拥塞控制机制</h3><p data-v-11bb2285>目的：根据网络中的拥塞情况来控制发送方数据的发送速率。一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。</p><p data-v-11bb2285>TCP 的拥塞控制主要使用了四个机制: <ul data-v-11bb2285><li data-v-11bb2285>慢启动:在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探 ，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT 时间后，发送窗口的长度就会加倍。当发送窗口的大小达到一个阈值的时候就进入拥塞避免算法。</li><li data-v-11bb2285>拥塞避免:为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。 这样将窗口的增长速率由指数增长，变为加法线性增长。</li><li data-v-11bb2285>快速重传:当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的 丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。</li><li data-v-11bb2285>快速恢复:因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥 塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。</li></ul></p>",28);Object(a["F"])();var pt=jt((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[vt])})),ft={name:"transport",props:{}};ft.render=pt,ft.__scopeId="data-v-11bb2285";var st=ft,ht=Object(a["gb"])("data-v-e11d0800");Object(a["H"])("data-v-e11d0800");var Tt=Object(a["n"])("h2",null,"网络层",-1),Pt=Object(a["n"])("p",null,"含义：网络层协议主要实现了不同主机间的逻辑通信功能。",-1);Object(a["F"])();var mt=ht((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[Tt,Pt])})),_t={name:"network",props:{}};_t.render=mt,_t.__scopeId="data-v-e11d0800";var St=_t,Ht=Object(a["gb"])("data-v-80f5a64c");Object(a["H"])("data-v-80f5a64c");var gt=Object(a["n"])("h2",null,"数据链路层",-1),Ct=Object(a["n"])("p",null,"含义：数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自物理层来的数据可靠地传输到相邻节点的目标机网络层。",-1);Object(a["F"])();var xt=Ht((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[gt,Ct])})),Nt={name:"data_link",props:{}};Nt.render=xt,Nt.__scopeId="data-v-80f5a64c";var It=Nt,yt=Object(a["gb"])("data-v-4b31c57c");Object(a["H"])("data-v-4b31c57c");var Mt=Object(a["n"])("h2",null,"物理层",-1),Dt=Object(a["n"])("p",null,"含义：物理层为设备之间的数据通信提供传输媒体及互连设备，为数据传输提供可靠的环境。",-1);Object(a["F"])();var Lt=yt((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[Mt,Dt])})),Et={name:"physical",props:{}};Et.render=Lt,Et.__scopeId="data-v-4b31c57c";var wt=Et,Ft=Object(a["gb"])("data-v-d01277d0");Object(a["H"])("data-v-d01277d0");var Ut=Object(a["l"])("<h2 data-v-d01277d0>HTML</h2><p data-v-d01277d0>含义：超文本标记语言,用于定义网页结构。</p><h3 data-v-d01277d0>HTML标签和元素</h3><p data-v-d01277d0>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p><ul data-v-d01277d0><li data-v-d01277d0>HTML 标签是由尖括号包围的关键词。</li><li data-v-d01277d0>HTML 标签通常是成对出现的。</li><li data-v-d01277d0>标签对中的第一个标签是开始标签，第二个标签是结束标签。</li></ul><p data-v-d01277d0>&quot;HTML 标签&quot; 和 &quot;HTML 元素&quot; 通常都是描述同样的意思.但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签。</p><h3 data-v-d01277d0>Web浏览器</h3><p data-v-d01277d0>Web浏览器（如谷歌浏览器，Internet Explorer，Firefox，Safari）是用于读取HTML文件，并将其作为网页显示。</p>",8);Object(a["F"])();var At=Ft((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[Ut])})),Rt={name:"introduction",props:{}};Rt.render=At,Rt.__scopeId="data-v-d01277d0";var qt=Rt,Xt=Object(a["gb"])("data-v-39bec19a");Object(a["H"])("data-v-39bec19a");var kt=Object(a["l"])("<h3 data-v-39bec19a>行内元素和块级元素</h3><p data-v-39bec19a>行内元素：只占内容部分，大部分行内元素的宽高不可设置。</p><p data-v-39bec19a>常见的行内元素：a 、span 、 img 、button 、 input 、 label 、 select 、 textarea</p><p data-v-39bec19a>块级元素：独占一行，宽高、内外边距都可以设置。</p><p data-v-39bec19a>常见的块级元素：div 、 ul 、 ol 、li 、 dl 、 dt 、 dd 、 h1 、h2 、 h3 、 h4 、 h5 、 h6 、 p</p><h3 data-v-39bec19a>进程和线程</h3><p data-v-39bec19a>进程：最小的资源管理单元</p><p data-v-39bec19a>线程：最小的执行单元</p><p data-v-39bec19a>浏览器本身就是多进程的，包括：</p><ul data-v-39bec19a><li data-v-39bec19a>Browser进程：浏览器主进程</li><li data-v-39bec19a>Render进程：渲染进程，也叫内核</li><li data-v-39bec19a>GPU进程：3D绘制</li><li data-v-39bec19a>第三方插件进程</li></ul><p data-v-39bec19a>Render进程包括多个线程：</p><ul data-v-39bec19a><li data-v-39bec19a>GUI线程</li><li data-v-39bec19a>JS引擎线程</li><li data-v-39bec19a>事件触发线程</li><li data-v-39bec19a>定时器线程</li><li data-v-39bec19a>异步http请求线程</li></ul><h3 data-v-39bec19a>浏览器的渲染原理</h3><ol data-v-39bec19a><li data-v-39bec19a>解析文档，构建DOM树</li><li data-v-39bec19a>解析CSS，构建CSSOM规则树</li><li data-v-39bec19a>根据DOM树和CSSOM规则树，生成渲染树，通过渲染树进行布局，确定各个节点在页面上的位置和大小。</li><li data-v-39bec19a>最后用paint方法对内容进行绘制。</li></ol> 　　 ",15);Object(a["F"])();var Wt=Xt((function(t,e,n,l,b,c){return Object(a["E"])(),Object(a["i"])("div",null,[kt])})),Gt={name:"conclusion",props:{},data:function(){return{}}};Gt.render=Wt,Gt.__scopeId="data-v-39bec19a";var Jt=Gt,Kt=[{path:"/",component:P},{path:"/home",component:tt,children:[{path:"/1-1",component:Ot},{path:"/1-2",component:st},{path:"/1-3",component:St},{path:"/1-4",component:It},{path:"/1-5",component:wt},{path:"/2-1",component:qt},{path:"/2-2",component:Jt}]}],Yt=Object(i["a"])({history:Object(i["b"])(),routes:Kt}),Bt=Yt,Vt=Object(a["h"])(d);Vt.use(u["a"]),Vt.use(Bt),Vt.mount("#app")},7900:function(t,e,n){},8784:function(t,e,n){},"88a7":function(t,e,n){"use strict";n("d57b")},c435:function(t,e,n){"use strict";n("7900")},d57b:function(t,e,n){},e927:function(t,e,n){"use strict";n("fcc6")},fcc6:function(t,e,n){},fd44:function(t,e,n){"use strict";n("8784")}});
//# sourceMappingURL=app.4700f91b.js.map