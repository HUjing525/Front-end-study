(function(t){function l(l){for(var e,d,i=l[0],b=l[1],u=l[2],o=0,p=[];o<i.length;o++)d=i[o],Object.prototype.hasOwnProperty.call(a,d)&&a[d]&&p.push(a[d][0]),a[d]=0;for(e in b)Object.prototype.hasOwnProperty.call(b,e)&&(t[e]=b[e]);r&&r(l);while(p.length)p.shift()();return c.push.apply(c,u||[]),n()}function n(){for(var t,l=0;l<c.length;l++){for(var n=c[l],e=!0,i=1;i<n.length;i++){var b=n[i];0!==a[b]&&(e=!1)}e&&(c.splice(l--,1),t=d(d.s=n[0]))}return t}var e={},a={app:0},c=[];function d(l){if(e[l])return e[l].exports;var n=e[l]={i:l,l:!1,exports:{}};return t[l].call(n.exports,n,n.exports,d),n.l=!0,n.exports}d.m=t,d.c=e,d.d=function(t,l,n){d.o(t,l)||Object.defineProperty(t,l,{enumerable:!0,get:n})},d.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},d.t=function(t,l){if(1&l&&(t=d(t)),8&l)return t;if(4&l&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(d.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&l&&"string"!=typeof t)for(var e in t)d.d(n,e,function(l){return t[l]}.bind(null,e));return n},d.n=function(t){var l=t&&t.__esModule?function(){return t["default"]}:function(){return t};return d.d(l,"a",l),l},d.o=function(t,l){return Object.prototype.hasOwnProperty.call(t,l)},d.p="";var i=window["webpackJsonp"]=window["webpackJsonp"]||[],b=i.push.bind(i);i.push=l,i=i.slice();for(var u=0;u<i.length;u++)l(i[u]);var r=b;c.push([0,"chunk-vendors"]),n()})({0:function(t,l,n){t.exports=n("56d7")},"0391":function(t,l,n){t.exports=n.p+"img/study.05e912dd.png"},"0f61":function(t,l,n){t.exports=n.p+"img/horizontally-vertically1.926e1b55.png"},"28fe":function(t,l,n){"use strict";n("d1ff")},"364d":function(t,l,n){"use strict";n("cd84")},"3cd1":function(t,l,n){t.exports=n.p+"img/horizontally-vertically3.e488edd2.png"},"56d7":function(t,l,n){"use strict";n.r(l);n("e260"),n("e6cf"),n("cca6"),n("a79d");var e=n("7a23"),a={id:"app"};function c(t,l,n,c,d,i){var b=Object(e["N"])("router-view");return Object(e["E"])(),Object(e["i"])("div",a,[Object(e["n"])(b)])}var d={name:"App"};n("fd44");d.render=c;var i=d,b=n("3fd4"),u=(n("7dd6"),n("6c02")),r=n("0391"),o=n.n(r),p=Object(e["gb"])("data-v-2e56cff0");Object(e["H"])("data-v-2e56cff0");var v={id:"hello"},O=Object(e["n"])("div",{id:"hi"},[Object(e["n"])("img",{alt:"Vue logo",src:o.a})],-1),f=Object(e["n"])("h1",{id:"title"}," Welcome to My Front-end Study Notes",-1),j={id:"hi"},s=Object(e["m"])("START");Object(e["F"])();var h=p((function(t,l,n,a,c,d){var i=Object(e["N"])("el-button"),b=Object(e["N"])("router-link");return Object(e["E"])(),Object(e["i"])("div",v,[O,f,Object(e["n"])("div",j,[Object(e["n"])(b,{to:"/home"},{default:p((function(){return[Object(e["n"])(i,{round:""},{default:p((function(){return[s]})),_:1})]})),_:1})])])})),T={name:"HelloWorld",props:{}};n("c435");T.render=h,T.__scopeId="data-v-2e56cff0";var m=T,g=Object(e["gb"])("data-v-cb08058e");Object(e["H"])("data-v-cb08058e");var P=Object(e["n"])("img",{src:o.a,alt:""},null,-1),C=Object(e["n"])("span",null,"前端学习笔记",-1),S=Object(e["n"])("i",{class:"el-icon-pear"},null,-1),x=Object(e["n"])("span",null,"计算机网络",-1),_=Object(e["m"])("应用层"),y=Object(e["m"])("传输层"),H=Object(e["m"])("网络层"),w=Object(e["m"])("数据链路层"),M=Object(e["m"])("物理层"),I=Object(e["n"])("i",{class:"el-icon-grape"},null,-1),N=Object(e["n"])("span",null,"HTML",-1),F=Object(e["m"])("总结"),D=Object(e["n"])("i",{class:"el-icon-orange"},null,-1),E=Object(e["n"])("span",null,"CSS",-1),L=Object(e["m"])("总结"),k=Object(e["n"])("i",{class:"el-icon-cherry"},null,-1),B=Object(e["n"])("span",null,"JavaScript",-1),U=Object(e["m"])("总结"),A=Object(e["n"])("i",{class:"el-icon-apple"},null,-1),R=Object(e["n"])("span",null,"数据结构",-1),q=Object(e["m"])("总结");Object(e["F"])();var W=g((function(t,l,n,a,c,d){var i=Object(e["N"])("el-header"),b=Object(e["N"])("el-menu-item"),u=Object(e["N"])("el-submenu"),r=Object(e["N"])("el-menu"),o=Object(e["N"])("el-aside"),p=Object(e["N"])("router-view"),v=Object(e["N"])("el-main"),O=Object(e["N"])("el-container");return Object(e["E"])(),Object(e["i"])("div",null,[Object(e["n"])(O,{class:"container"},{default:g((function(){return[Object(e["n"])(i,null,{default:g((function(){return[P,C]})),_:1}),Object(e["n"])(O,null,{default:g((function(){return[Object(e["n"])(o,{width:c.isCollapse?"64px":"200px"},{default:g((function(){return[Object(e["n"])("div",{class:"toggle-button",onClick:l[1]||(l[1]=function(){return d.toggleCollapse&&d.toggleCollapse.apply(d,arguments)})},"|||"),Object(e["n"])(r,{"text-color":"#333","active-text-color":"red","unique-opened":!0,"collapse-transition":"false",collapse:c.isCollapse,router:!0},{default:g((function(){return[Object(e["n"])(u,{index:"1"},{title:g((function(){return[S,x]})),default:g((function(){return[Object(e["n"])(b,{index:"1-1"},{default:g((function(){return[_]})),_:1}),Object(e["n"])(b,{index:"1-2"},{default:g((function(){return[y]})),_:1}),Object(e["n"])(b,{index:"1-3"},{default:g((function(){return[H]})),_:1}),Object(e["n"])(b,{index:"1-4"},{default:g((function(){return[w]})),_:1}),Object(e["n"])(b,{index:"1-5"},{default:g((function(){return[M]})),_:1})]})),_:1}),Object(e["n"])(u,{index:"2"},{title:g((function(){return[I,N]})),default:g((function(){return[Object(e["n"])(b,{index:"2-1"},{default:g((function(){return[F]})),_:1})]})),_:1}),Object(e["n"])(u,{index:"3"},{title:g((function(){return[D,E]})),default:g((function(){return[Object(e["n"])(b,{index:"3-1"},{default:g((function(){return[L]})),_:1})]})),_:1}),Object(e["n"])(u,{index:"4"},{title:g((function(){return[k,B]})),default:g((function(){return[Object(e["n"])(b,{index:"4-1"},{default:g((function(){return[U]})),_:1})]})),_:1}),Object(e["n"])(u,{index:"5"},{title:g((function(){return[A,R]})),default:g((function(){return[Object(e["n"])(b,{index:"5-1"},{default:g((function(){return[q]})),_:1})]})),_:1})]})),_:1},8,["collapse"])]})),_:1},8,["width"]),Object(e["n"])(v,null,{default:g((function(){return[Object(e["n"])(p)]})),_:1})]})),_:1})]})),_:1})])})),X={name:"home",props:{},data:function(){return{isCollapse:!1}},methods:{toggleCollapse:function(){this.isCollapse=!this.isCollapse}}};n("364d");X.render=W,X.__scopeId="data-v-cb08058e";var J=X,z=Object(e["gb"])("data-v-2309b75a");Object(e["H"])("data-v-2309b75a");var G=Object(e["l"])('<h2 data-v-2309b75a>应用层</h2><p data-v-2309b75a>含义：应用层协议定义了应用进程间的交互和通信规则。</p><h3 data-v-2309b75a>HTTP协议</h3><p data-v-2309b75a>含义：HTTP是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。</p><p data-v-2309b75a>特点： <ol data-v-2309b75a><li data-v-2309b75a>HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li><li data-v-2309b75a>有会话的，可以使用cookies保存一小段数据。</li></ol></p><p data-v-2309b75a>连接模式： <ul data-v-2309b75a><li data-v-2309b75a>非持久连接：服务器必须为每一个请求的对象建立和维护一个全新的连接。</li><li data-v-2309b75a>持久连接：TCP 连接默认不关闭，可以被多个请求复用。</li></ul></p><h4 data-v-2309b75a>HTTP请求报文</h4><p data-v-2309b75a>HTTP请求报文含三部分：请求行、首部行、实体主体</p><p class="a" data-v-2309b75a>请求行包含：方法字段、URL字段和 HTTP版本字段</p>',9),K=Object(e["n"])("div",{class:"b"},[Object(e["n"])("table",{class:"c",border:"1",cellspacing:"0",cellpadding:"5",width:"500",height:"220"},[Object(e["n"])("thead",null,[Object(e["n"])("tr",null,[Object(e["n"])("th",null,"方法字段"),Object(e["n"])("th",null,"含义")])]),Object(e["n"])("tbody",null,[Object(e["n"])("tr",null,[Object(e["n"])("td",null,"GET"),Object(e["n"])("td",null,"请求服务器发送某个资源，请求不含实体主体，是安全的，幂等的。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"POST"),Object(e["n"])("td",null,"将实体提交到指定的资源，通常通过HTML表单发送，并返回服务器的修改结果。不安全，非幂等的。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"PUT"),Object(e["n"])("td",null,"用请求有效载荷替换目标资源的所有当前表示。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"PATCH"),Object(e["n"])("td",null,"用于对资源进行部分修改。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"CONNECT"),Object(e["n"])("td",null,"建立一个由客户端到目标资源标识的服务器的隧道。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"HEAD"),Object(e["n"])("td",null,"请求一个与GET请求的响应相同的响应，但没有响应体。")])])])],-1),Y=Object(e["n"])("h4",null,"HTTP响应报文",-1),Q=Object(e["n"])("p",null,"HTTP响应报文含三部分：状态行、首部行、实体主体",-1),V=Object(e["n"])("p",{class:"c"},"状态行包含：HTTP版本字段、状态码、相应的状态信息",-1),Z=Object(e["n"])("ul",{class:"d"},[Object(e["n"])("li",null,"1XX:代表服务器接收到请求"),Object(e["n"])("li",null,"2XX:代表成功"),Object(e["n"])("li",null,"3XX:代表重定向"),Object(e["n"])("li",null,"4XX:代表客户端错误"),Object(e["n"])("li",null,"5XX:代表服务器端错误")],-1),$=Object(e["n"])("div",{class:"e"},[Object(e["n"])("table",{class:"c",border:"1",cellspacing:"0",cellpadding:"5",width:"500",height:"220"},[Object(e["n"])("thead",null,[Object(e["n"])("tr",null,[Object(e["n"])("th",null,"状态码"),Object(e["n"])("th",null,"英文名称"),Object(e["n"])("th",null,"中文描述")])]),Object(e["n"])("tbody",null,[Object(e["n"])("tr",null,[Object(e["n"])("td",null,"100"),Object(e["n"])("td",null,"continue"),Object(e["n"])("td",null,"一切正常，服务器可以继续发送请求。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"200"),Object(e["n"])("td",null,"OK"),Object(e["n"])("td",null,"请求成功")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"202"),Object(e["n"])("td",null,"Accepted"),Object(e["n"])("td",null,"已经接受请求，但未响应。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"204"),Object(e["n"])("td",null,"No Content"),Object(e["n"])("td",null,"服务器成功处理，但未返回实体主体。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"301"),Object(e["n"])("td",null,"Moved Permanently"),Object(e["n"])("td",null,"永久移动。请求的资源已被永久的移动到新URI，今后任何新的请求都应使用新的URI代替。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"302"),Object(e["n"])("td",null,"Found"),Object(e["n"])("td",null,"临时移动。请求的资源只是临时被移动。客户端之后的请求应继续使用原有URI。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"304"),Object(e["n"])("td",null,"Not Modified"),Object(e["n"])("td",null,"所请求的资源未修改，服务器不会返回任何资源，但客户端可以使用缓存中的内容。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"204"),Object(e["n"])("td",null,"No Content"),Object(e["n"])("td",null,"服务器成功处理，但未返回实体主体。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"307"),Object(e["n"])("td",null,"Temporary Redirect"),Object(e["n"])("td",null,"临时重定向。与302类似。但307可以确保请求方法和实体主体不变。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"308"),Object(e["n"])("td",null,"Permanent Redirect"),Object(e["n"])("td",null,"永久重定向。与301类似。但308可以确保请求方法和实体主体不变。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"400"),Object(e["n"])("td",null,"Bad Request"),Object(e["n"])("td",null,"客户端请求的语法错误，服务器无法理解。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"404"),Object(e["n"])("td",null,"Not Found"),Object(e["n"])("td",null,"服务器未找到请求的资源。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"500"),Object(e["n"])("td",null,"Internal Server Error"),Object(e["n"])("td",null,"客服务器内部出错。")]),Object(e["n"])("tr",null,[Object(e["n"])("td",null,"503"),Object(e["n"])("td",null,"Service Unavailable "),Object(e["n"])("td",null,"由于超载或系统维护，服务器暂时的无法处理客户端的请求。（即服务器未准备好处理请求）")])])])],-1),tt=Object(e["l"])("<h4 data-v-2309b75a>HTTP/1.0</h4><p data-v-2309b75a>特点：采用非持久连接，服务器必须为每次请求的对象建立和维护一个全新的连接。</p><h4 data-v-2309b75a>HTTP/1.1</h4><p data-v-2309b75a>特点：采用持久连接，多个请求可以复用同一个 TCP 连接。</p><p data-v-2309b75a>缺点：数据请求的通信次序 是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许 多请求排队等待的情况，这种情况被称为“队头堵塞”。</p><p data-v-2309b75a>解决办法： <ul data-v-2309b75a><li data-v-2309b75a>减少请求数</li><li data-v-2309b75a>同时打开多个持久连接</li></ul></p><h4 data-v-2309b75a>HTTP/2</h4><p data-v-2309b75a>目的：主要解决 HTTP/1.1 效率不高的问题。</p><p data-v-2309b75a>新特性：</p><ul data-v-2309b75a><li data-v-2309b75a>二进制协议 <p data-v-2309b75a>在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为&quot;帧&quot;，可以分为头信息帧和数据帧。它是实现多路复用的基础。</p></li><li data-v-2309b75a>多路复用 <p data-v-2309b75a>在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了&quot;队头堵塞&quot;的问题。</p></li><li data-v-2309b75a>数据流 <p data-v-2309b75a>将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流 ID ，用来区分它属于哪个数据流。</p></li><li data-v-2309b75a>头信息压缩 <p data-v-2309b75a>一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面， 客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</p></li><li data-v-2309b75a>服务器推送 <p data-v-2309b75a>允许服务器未经请求，主动向客户端发送静态资源资源。</p></li></ul><h3 data-v-2309b75a>HTTPS协议</h3><p data-v-2309b75a>含义：HTTPS 指的是超文本传输安全协议，HTTPS 是基于 HTTP 协议的，不过它会使用 TLS/SSL 来对数据加密。使用 TLS/ SSL 协议，所有的信息都是加密的，第三方没有办法窃听。并且它提供了一种校验机制，信息一旦被篡改，通信的双方会立刻发现。它还配备了身份证书，防止身份被冒充的情况出现。</p><p data-v-2309b75a>TLS握手过程：</p><ul data-v-2309b75a><li data-v-2309b75a>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</li><li data-v-2309b75a>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</li><li data-v-2309b75a>客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服务器。然后服务器使用自己的私钥，来解密客户端发送过来的随机数。</li><li data-v-2309b75a>客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li></ul><h3 data-v-2309b75a>DNS协议</h3><p data-v-2309b75a>含义：DNS 协议提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。</p><p data-v-2309b75a>递归查询和迭代查询：</p><ul data-v-2309b75a><li data-v-2309b75a>我们向本地 DNS 服务器发送请求的方式就是递归查询。</li><li data-v-2309b75a>本地 DNS 服务器向其他域名服务器请求的过程是迭代查询的过程。</li></ul><p data-v-2309b75a>DNS 缓存：</p><p data-v-2309b75a>含义：当某个 DNS 服务器接收到一个 DNS 回答后，它能够将回答中的信息缓存在本地存储器中。</p>",20);Object(e["F"])();var lt=z((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[G,K,Y,Q,V,Z,$,tt])})),nt={name:"application",props:{}};n("88a7");nt.render=lt,nt.__scopeId="data-v-2309b75a";var et=nt,at=Object(e["gb"])("data-v-11bb2285");Object(e["H"])("data-v-11bb2285");var ct=Object(e["l"])("<h2 data-v-11bb2285>传输层</h2><p data-v-11bb2285>含义：传输层协议主要是为不同主机上的不同进程间提供了逻辑通信的功能。</p><h3 data-v-11bb2285>多路复用和多路分解：</h3><ul data-v-11bb2285><li data-v-11bb2285>一个信道同时传输多路信号是多路复用。</li><li data-v-11bb2285>将多路信号交付给对应的接收端是多路分解。</li></ul><p data-v-11bb2285>无连接的多路复用和多路分解指的是 UDP 套接字的分配过程，一个 UDP 套接字由一个二元组来标识，这个二元组包含了一个目的地址和一个目的端口号。</p><p data-v-11bb2285>面向连接的多路复用和多路分解指的是 TCP 套接字的分配过程，一个 TCP 套接字由一个四元组来标识，这个四元组包含了源 IP 地址、源端口号、目的地址和目的端口号。</p><h3 data-v-11bb2285>UDP协议</h3><p data-v-11bb2285>含义：UDP 是一种无连接的，不可靠的传输层协议。</p><p data-v-11bb2285>特点：</p><ul data-v-11bb2285><li data-v-11bb2285>使用 UDP 时，在发送报文段之前，通信双方没有握手的过程，因此 UDP 被称为是无连接的传输层协议。</li><li data-v-11bb2285>UDP 协议不保证数据的可靠交付。</li></ul><p data-v-11bb2285>UDP 报文段结构：</p><p data-v-11bb2285>UDP 报文段由首部和应用数据组成。报文段首部包含四个字段，分别是源端口号、目的端口号、长度和检验和。</p><h3 data-v-11bb2285>TCP协议</h3><p data-v-11bb2285>含义：TCP 协议是面向连接的，提供可靠数据传输服务的传输层协议。</p><p data-v-11bb2285>特点：</p><ul data-v-11bb2285><li data-v-11bb2285>TCP 协议是面向连接的，在通信双方进行通信前，需要通过三次握手建立连接。</li><li data-v-11bb2285>TCP 协议通过序号、确认号、定时重传、检验和等机制，来提供可靠的数据传输服务。</li><li data-v-11bb2285>TCP 提供了流量控制机制和拥塞控制机制。</li></ul><h3 data-v-11bb2285>TCP三次握手过程</h3><ol data-v-11bb2285><li data-v-11bb2285>客户端向服务器发送一个 SYN 连接请求报文段以及客户端数据的初始序号。</li><li data-v-11bb2285>服务器端接收到客户端发送的 SYN 连接请求报文段后，向客户端发送 SYN ACK 报文段以及服务器端数据的初始序号。</li><li data-v-11bb2285>客户端接收到服务器的肯定应答后，它也会为这次 TCP 连接分配缓存和变量，同时向服务器端发送一个对服务器端的报文段的确认。</li></ol><h3 data-v-11bb2285>TCP四次挥手过程</h3><ol data-v-11bb2285><li data-v-11bb2285>客户端认为没有数据要再发送给服务器端，它就向服务器发送一个 FIN 报文段，申请断开客户端到服务器端的连接。发送后客户端进入 FIN_WAIT_1 状态。</li><li data-v-11bb2285>服务器端接收到客户端释放连接的请求后，向客户端发送一个确认报文段，表示已经接收到了客户端释放连接的请求，以后不再接收客户端发送过来的数据。但是因为连接是全双工的，所以此时，服务器端还可以向客户端发送数据。服务器端进入 CLOSE_WAIT 状态。客户端收到确认后，进入 FIN_WAIT_2 状态。</li><li data-v-11bb2285>服务器端发送完所有数据后，向客户端发送 FIN 报文段，申请断开服务器端到客户端的连接。发送后进入 LAS T_ACK 状态。</li><li data-v-11bb2285>客户端接收到 FIN 请求后，向服务器端发送一个确认应答，并进入 TIME_WAIT 阶段。该阶段会持续一段时间， 这个时间为报文段在网络中的最大生存时间，如果该时间内服务端没有重发请求的话，客户端进入 CLOSED 的状态。如果收到服务器的重发请求就重新发送确认报文段。服务器端收到客户端的确认报文段后就进入 CLOSED 状态，这样全双工的连接就被释放了。</li></ol><h3 data-v-11bb2285>TCP的可靠运输机制</h3><ul data-v-11bb2285><li data-v-11bb2285>TCP 的可靠运输机制是基于连续 ARQ 协议和滑动窗口协议的。</li><li data-v-11bb2285>TCP就是通过调整发送窗口的大小来控制发送速率，发送窗口的大小根据网络的拥塞程度动态变化。</li><li data-v-11bb2285>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。</li></ul><h3 data-v-11bb2285>TCP流量控制机制</h3><p data-v-11bb2285>目的：控制发送方的发送速率，保证接收方来得及接收。</p><p data-v-11bb2285>方法：接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据 接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。</p><h3 data-v-11bb2285>TCP拥塞控制机制</h3><p data-v-11bb2285>目的：根据网络中的拥塞情况来控制发送方数据的发送速率。一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。</p><p data-v-11bb2285>TCP 的拥塞控制主要使用了四个机制: <ul data-v-11bb2285><li data-v-11bb2285>慢启动:在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探 ，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT 时间后，发送窗口的长度就会加倍。当发送窗口的大小达到一个阈值的时候就进入拥塞避免算法。</li><li data-v-11bb2285>拥塞避免:为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。 这样将窗口的增长速率由指数增长，变为加法线性增长。</li><li data-v-11bb2285>快速重传:当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的 丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。</li><li data-v-11bb2285>快速恢复:因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥 塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。</li></ul></p>",28);Object(e["F"])();var dt=at((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[ct])})),it={name:"transport",props:{}};it.render=dt,it.__scopeId="data-v-11bb2285";var bt=it,ut=Object(e["gb"])("data-v-e11d0800");Object(e["H"])("data-v-e11d0800");var rt=Object(e["n"])("h2",null,"网络层",-1),ot=Object(e["n"])("p",null,"含义：网络层协议主要实现了不同主机间的逻辑通信功能。",-1);Object(e["F"])();var pt=ut((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[rt,ot])})),vt={name:"network",props:{}};vt.render=pt,vt.__scopeId="data-v-e11d0800";var Ot=vt,ft=Object(e["gb"])("data-v-80f5a64c");Object(e["H"])("data-v-80f5a64c");var jt=Object(e["n"])("h2",null,"数据链路层",-1),st=Object(e["n"])("p",null,"含义：数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自物理层来的数据可靠地传输到相邻节点的目标机网络层。",-1);Object(e["F"])();var ht=ft((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[jt,st])})),Tt={name:"data_link",props:{}};Tt.render=ht,Tt.__scopeId="data-v-80f5a64c";var mt=Tt,gt=Object(e["gb"])("data-v-4b31c57c");Object(e["H"])("data-v-4b31c57c");var Pt=Object(e["n"])("h2",null,"物理层",-1),Ct=Object(e["n"])("p",null,"含义：物理层为设备之间的数据通信提供传输媒体及互连设备，为数据传输提供可靠的环境。",-1);Object(e["F"])();var St=gt((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[Pt,Ct])})),xt={name:"physical",props:{}};xt.render=St,xt.__scopeId="data-v-4b31c57c";var _t=xt,yt=Object(e["gb"])("data-v-e0cf6df4");Object(e["H"])("data-v-e0cf6df4");var Ht=Object(e["l"])("<h2 data-v-e0cf6df4>HTML</h2><p data-v-e0cf6df4>含义：超文本标记语言,用于定义网页结构。</p><h3 data-v-e0cf6df4>HTML标签和元素</h3><p data-v-e0cf6df4>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p><ul data-v-e0cf6df4><li data-v-e0cf6df4>HTML 标签是由尖括号包围的关键词。</li><li data-v-e0cf6df4>HTML 标签通常是成对出现的。</li><li data-v-e0cf6df4>标签对中的第一个标签是开始标签，第二个标签是结束标签。</li></ul><p data-v-e0cf6df4>&quot;HTML 标签&quot; 和 &quot;HTML 元素&quot; 通常都是描述同样的意思.但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签。</p><h3 data-v-e0cf6df4>Web浏览器</h3><p data-v-e0cf6df4>Web浏览器（如谷歌浏览器，Internet Explorer，Firefox，Safari）是用于读取HTML文件，并将其作为网页显示。</p><h3 data-v-e0cf6df4>行内元素和块级元素</h3><p data-v-e0cf6df4>行内元素：只占内容部分，大部分行内元素的宽高不可设置。</p><p data-v-e0cf6df4>常见的行内元素：a 、span 、 img 、button 、 input 、 label 、 select 、 textarea</p><p data-v-e0cf6df4>块级元素：独占一行，宽高、内外边距都可以设置。</p><p data-v-e0cf6df4>常见的块级元素：div 、 ul 、 ol 、li 、 dl 、 dt 、 dd 、 h1 、h2 、 h3 、 h4 、 h5 、 h6 、 p</p><h3 data-v-e0cf6df4>进程和线程</h3><p data-v-e0cf6df4>进程：最小的资源管理单元</p><p data-v-e0cf6df4>线程：最小的执行单元</p><p data-v-e0cf6df4>浏览器本身就是多进程的，包括：</p><ul data-v-e0cf6df4><li data-v-e0cf6df4>Browser进程：浏览器主进程</li><li data-v-e0cf6df4>Render进程：渲染进程，也叫内核</li><li data-v-e0cf6df4>GPU进程：3D绘制</li><li data-v-e0cf6df4>第三方插件进程</li></ul><p data-v-e0cf6df4>Render进程包括多个线程：</p><ul data-v-e0cf6df4><li data-v-e0cf6df4>GUI线程</li><li data-v-e0cf6df4>JS引擎线程</li><li data-v-e0cf6df4>事件触发线程</li><li data-v-e0cf6df4>定时器线程</li><li data-v-e0cf6df4>异步http请求线程</li></ul><h3 data-v-e0cf6df4>浏览器的渲染原理</h3><ol data-v-e0cf6df4><li data-v-e0cf6df4>解析文档，构建DOM树</li><li data-v-e0cf6df4>解析CSS，构建CSSOM规则树</li><li data-v-e0cf6df4>根据DOM树和CSSOM规则树，生成渲染树，通过渲染树进行布局，确定各个节点在页面上的位置和大小。</li><li data-v-e0cf6df4>最后用paint方法对内容进行绘制。</li></ol><h3 data-v-e0cf6df4>浏览器端的存储技术</h3><ul data-v-e0cf6df4><li data-v-e0cf6df4>cookie:由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie 最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。</li><li data-v-e0cf6df4>sessionStorage: 是 html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。</li><li data-v-e0cf6df4> localStorage: 也是 html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage 不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。</li></ul>",24);Object(e["F"])();var wt=yt((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[Ht])})),Mt={name:"conclusion_html",props:{}};Mt.render=wt,Mt.__scopeId="data-v-e0cf6df4";var It=Mt,Nt=n("f3ea"),Ft=n.n(Nt),Dt=n("0f61"),Et=n.n(Dt),Lt=n("c48d"),kt=n.n(Lt),Bt=n("3cd1"),Ut=n.n(Bt),At=n("c131"),Rt=n.n(At),qt=n("7849"),Wt=n.n(qt),Xt=Object(e["gb"])("data-v-0c517679");Object(e["H"])("data-v-0c517679");var Jt=Object(e["n"])("h2",null,"CSS",-1),zt=Object(e["n"])("p",null,"含义：层叠样式表,用于定义网页样式。",-1),Gt=Object(e["n"])("h3",null,"盒模型",-1),Kt=Object(e["n"])("p",null,"盒模型分为：内容（content）、填充（padding）、边界（margin）、边框（border）四个部分。",-1),Yt=Object(e["n"])("p",null,"两种盒子模型：IE盒模型（border-box）、W3C标准盒模型（content-box）。",-1),Qt=Object(e["n"])("p",{class:"a"},"区别：IE盒模型：属性width，height包含content、border和padding。W3C标准盒模型：属性width，height只包含内容content。",-1),Vt=Object(e["n"])("p",null,"通过 box-sizing 属性可改变盒模型。",-1),Zt=Object(e["n"])("h3",null,"选择器",-1),$t=Object(e["n"])("p",null,"伪类一般匹配的是元素的一些特殊状态，如hover、link等，而伪元素一般匹配的特殊的位置，比如after、before等。",-1),tl=Object(e["n"])("p",{class:"b"},"注意：权重叠加，不能进位，继承的权重为0。",-1),ll=Object(e["n"])("h3",null,"display的值",-1),nl=Object(e["n"])("ul",null,[Object(e["n"])("li",null,"block:块级元素，独占一行，可设置宽高。"),Object(e["n"])("li",null,"inline:行内元素，只占内容部分，大部分不可设置宽高，同行显示。"),Object(e["n"])("li",null,"inline-block：行内块元素，可以一行放多个，宽高可设置"),Object(e["n"])("li",null,"none：不显示"),Object(e["n"])("li",null,"inherit：继承父元素display属性的值"),Object(e["n"])("li",null,"flex:弹性布局")],-1),el=Object(e["n"])("h3",null,"position的值",-1),al=Object(e["n"])("ul",null,[Object(e["n"])("li",null,"absolute：绝对定位，相对父级位置移动，不占位置"),Object(e["n"])("li",null,"relative：相对定位，相对自身位置移动，占有位置"),Object(e["n"])("li",null,"fixed:固定，相对浏览器位置移动，不占有位置。"),Object(e["n"])("li",null,"static：默认值，没有定位，元素出现在正常的流中。")],-1),cl=Object(e["n"])("h3",null,"居中方法",-1),dl=Object(e["n"])("p",null,"水平居中：",-1),il=Object(e["n"])("img",{src:Ft.a,alt:"",width:"200px"},null,-1),bl=Object(e["n"])("p",null,"水平垂直居中：",-1),ul=Object(e["n"])("p",null,"绝对定位3种：",-1),rl=Object(e["n"])("img",{class:"c",src:Et.a,alt:""},null,-1),ol=Object(e["n"])("img",{class:"c",src:kt.a,alt:""},null,-1),pl=Object(e["n"])("img",{class:"c",src:Ut.a,alt:""},null,-1),vl=Object(e["n"])("p",null,"flex布局1种：",-1),Ol=Object(e["n"])("img",{class:"c",src:Rt.a,alt:""},null,-1),fl=Object(e["n"])("h3",null,"Flex弹性布局",-1),jl=Object(e["n"])("p",null,"弹性布局分为两部分：容器和项目。",-1),sl=Object(e["n"])("p",null,[Object(e["m"])("以下6个属性设置在容器上: "),Object(e["n"])("ul",null,[Object(e["n"])("li",null,"flex-direction属性决定主轴的方向（即项目的排列方向）。"),Object(e["n"])("li",null,"flex-wrap属性定义，如果一条轴线排不下，如何换行。"),Object(e["n"])("li",null,"flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。"),Object(e["n"])("li",null,"justify-content属性定义了项目在主轴上的对齐方式。"),Object(e["n"])("li",null,"align-items属性定义项目在交叉轴上如何对齐。"),Object(e["n"])("li",null,"align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。")])],-1),hl=Object(e["n"])("p",null,[Object(e["m"])("以下6个属性设置在项目上: "),Object(e["n"])("ul",null,[Object(e["n"])("li",null,"order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。"),Object(e["n"])("li",null,"flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。"),Object(e["n"])("li",null,"flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。"),Object(e["n"])("li",null,"flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。"),Object(e["n"])("li",null,"flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。"),Object(e["n"])("li",null,"align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。")])],-1),Tl=Object(e["n"])("p",null,"实现三栏布局",-1),ml=Object(e["n"])("img",{class:"c",src:Wt.a,alt:""},null,-1),gl=Object(e["n"])("h3",null,"BFC块级格式化上下文",-1),Pl=Object(e["n"])("p",null,"含义：BFC指的是块级格式化上下文，一个元素形成了BFC之后，那么它内部元素产生的布局不会影响到外部元素，外部元素的布局也不会影响到BFC中的内部元素。一个BFC就像是一个隔离区域，和其他区域互不影响。",-1),Cl=Object(e["n"])("p",null,"如何创建BFC：一般来说根元素是一个BFC区域，浮动和绝对定位的元素也会形成BFC，display属性的值为inline-block、flex这些属性时也会创建BFC。还有就是元素的overflow的值不为visible时都会创建BFC。",-1),Sl=Object(e["n"])("p",null,"作用：清除浮动，防止margin重叠。",-1),xl=Object(e["n"])("h3",null,"清除浮动",-1),_l=Object(e["n"])("p",null,"目的：为了解决父级元素因为子级元素浮动而引起的内部高度为0的问题。",-1),yl=Object(e["n"])("p",null,[Object(e["m"])("方法： "),Object(e["n"])("ul",null,[Object(e["n"])("li",null,"使用clear属性清除浮动。"),Object(e["n"])("li",null,"使用BFC块级格式化上下文来清除浮动。"),Object(e["n"])("li",null,"使用伪元素的方式清除浮动。")])],-1),Hl=Object(e["n"])("h3",null,"移动端的三个viewport",-1),wl=Object(e["n"])("p",null,"layout viewport：移动设备通过滚动条或者缩放可以查看整个页面。",-1),Ml=Object(e["n"])("p",null,"visual viewport：移动设备上可见的区域的大小。",-1),Il=Object(e["n"])("p",null,"ideal viewport：通过修改布局视口的大小，让它等于设备的宽度。",-1),Nl=Object(e["n"])("h3",null,"常见的元素隐藏方式",-1),Fl=Object(e["n"])("ul",null,[Object(e["n"])("li",null,"使用 display:none;隐藏元素，渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。"),Object(e["n"])("li",null,"使用 visibility:hidden;隐藏元素。元素在页面中仍占据空间，但是不会响应绑定的监听事件。"),Object(e["n"])("li",null,"使用 opacity:0;将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。"),Object(e["n"])("li",null,"通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。"),Object(e["n"])("li",null,"通过 z-index 负值，来使其他元素遮盖住该元素，以此来实现隐藏。"),Object(e["n"])("li",null,"通过 transform:scale(0,0)来将元素缩放为 0，以此来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。")],-1);Object(e["F"])();var Dl=Xt((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[Jt,zt,Gt,Kt,Yt,Qt,Vt,Zt,$t,Object(e["n"])("p",{textContent:Object(e["R"])(c.content1)},null,8,["textContent"]),tl,ll,nl,el,al,cl,dl,il,bl,ul,rl,ol,pl,vl,Ol,fl,jl,sl,hl,Tl,ml,gl,Pl,Cl,Sl,xl,_l,yl,Hl,wl,Ml,Il,Nl,Fl])})),El={name:"conclusion_html",props:{},data:function(){return{content1:"优先级：通配符选择器 < 元素、伪元素(0001) < 类、伪类选择器(0010) < ID选择器(0100) < 行内样式(1000) < ！important"}}};n("28fe");El.render=Dl,El.__scopeId="data-v-0c517679";var Ll=El,kl=Object(e["gb"])("data-v-21d061f1");Object(e["H"])("data-v-21d061f1");var Bl=Object(e["n"])("h2",null,"JavaScript",-1),Ul=Object(e["l"])('<h3 data-v-21d061f1>JS数据类型</h3><ul data-v-21d061f1><li data-v-21d061f1>基本数据类型: Undefined、Null、Boolean、Number、String、Symbol</li><li data-v-21d061f1>复杂数据类型: Object （Array、Date）</li></ul><p data-v-21d061f1>区别：</p><p class="a" data-v-21d061f1>基本数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><h3 data-v-21d061f1>堆和栈</h3><ul data-v-21d061f1><li data-v-21d061f1>在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的。</li><li data-v-21d061f1>在操作系统中，内存被分为栈区和堆区。基本数据类型直接存储在栈中，复杂数据类型存储在堆中。</li></ul><h3 data-v-21d061f1>内部属性 [[Class]] </h3><p data-v-21d061f1>所有 typeof 返回值为 &quot;object&quot; 的对象（如数组）都包含一个内部属性 [[Class]]（我们可以把它看作一个内部的分类，而非传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查看。</p><h3 data-v-21d061f1>JS创建对象的方式</h3><p data-v-21d061f1>我们一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。我了解到的创建大量对象的方式有：</p><ul data-v-21d061f1><li data-v-21d061f1>工厂模式:工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它不能识别特定类型。</li><li data-v-21d061f1>构造函数模式：用this创建属性和方法，能表示特定类型，但方法会被重复创建。</li><li data-v-21d061f1>原型模式:在函数的prototype属性上创建对象的属性和方法。</li><li data-v-21d061f1>组合模式：通过构造函数初始化对象的属性，通过原型实现方法的复用。</li><li data-v-21d061f1>类</li></ul><h3 data-v-21d061f1>预解析和执行</h3><p data-v-21d061f1>在预解析阶段，会创建执行上下文，执行上下文分为： <ul data-v-21d061f1><li data-v-21d061f1>全局执行上下文</li><li data-v-21d061f1>函数执行上下文</li><li data-v-21d061f1>Eval执行上下文</li></ul></p><p data-v-21d061f1>一个执行上下文含： <ul data-v-21d061f1><li data-v-21d061f1>变量对象：用来存放函数和变量</li><li data-v-21d061f1>作用域链：各级执行上下文的变量对象组成的链表</li><li data-v-21d061f1>this</li></ul></p><p data-v-21d061f1>预解析阶段，变量对象含： <ul data-v-21d061f1><li data-v-21d061f1>根据函数参数创建的arguments对象</li><li data-v-21d061f1>寻找函数声明，若有，则将函数声明和引用存入变量对象。</li><li data-v-21d061f1>寻找变量声明，若有，则将变量名存入变量对象，并初始化undefined。</li></ul></p><h3 data-v-21d061f1>this指向</h3><ul data-v-21d061f1><li data-v-21d061f1>直接作为函数来调用时，this 指向全局对象。</li><li data-v-21d061f1>作为一个对象的方法来调用时，this 指向这个对象。</li><li data-v-21d061f1>apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。</li><li data-v-21d061f1>用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li></ul><p data-v-21d061f1>大多数情况下，this指向最后调用它的对象，箭头函数没有自己的this指向，它继承上一级作用域的this指向。</p><h3 data-v-21d061f1>闭包</h3><p data-v-21d061f1>含义：函数和函数可以访问的变量对象的总和。</p><p data-v-21d061f1>从理论上说，JS中所有的函数都是闭包。在实际应用中，通常在函数的内部再创建一个函数，那么创建的函数就可以访问当前函数作用域中的变量对象，此时内部函数和外部函数的变量对象就形成了闭包。</p><p data-v-21d061f1>作用： <ul data-v-21d061f1><li data-v-21d061f1>通过使用闭包，可以从函数外部调用闭包函数从而访问函数内部的变量。</li><li data-v-21d061f1>闭包也可以让已经结束运行的函数的变量对象保留下来不被垃圾回收机制回收。</li></ul></p><h3 data-v-21d061f1>new操作符</h3><p data-v-21d061f1>作用： <ul data-v-21d061f1><li data-v-21d061f1>首先创建了一个新的空对象</li><li data-v-21d061f1>设置原型，将对象的原型设置为函数的 prototype 对象。</li><li data-v-21d061f1>让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）。</li><li data-v-21d061f1>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ul></p><h3 data-v-21d061f1>DOM和BOM</h3><p data-v-21d061f1>DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。</p><p data-v-21d061f1>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window。</p><h3 data-v-21d061f1>事件</h3><p data-v-21d061f1>含义：事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。</p><p data-v-21d061f1>事件处理机制： <ul data-v-21d061f1><li data-v-21d061f1>事件冒泡</li><li data-v-21d061f1>事件捕获</li></ul></p><p data-v-21d061f1>阻止冒泡方法：event.stopPropagation() 或者 event.cancelBubble = true。</p><p data-v-21d061f1>三种事件模型： <ul data-v-21d061f1><li data-v-21d061f1>DOM0级：这种模型不会传播。</li><li data-v-21d061f1>DOM1级：在该事件模型中，一次事件共有两个过程，事件目标阶段和事件冒泡阶段。事件目标阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。</li><li data-v-21d061f1>DOM2级：在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。</li></ul></p>',32);Object(e["F"])();var Al=kl((function(t,l,n,a,c,d){return Object(e["E"])(),Object(e["i"])("div",null,[Bl,Object(e["n"])("p",{innerHTML:c.content1},null,8,["innerHTML"]),Ul])})),Rl={name:"conclusion_js",props:{},data:function(){return{content1:"<p>含义：JavaScript 是一种轻量级的编程语言,用于实现网页间的交互。</p>"}}};n("d09a");Rl.render=Al,Rl.__scopeId="data-v-21d061f1";var ql=Rl,Wl=[{path:"/",component:m},{path:"/home",component:J,children:[{path:"/1-1",component:et},{path:"/1-2",component:bt},{path:"/1-3",component:Ot},{path:"/1-4",component:mt},{path:"/1-5",component:_t},{path:"/2-1",component:It},{path:"/3-1",component:Ll},{path:"/4-1",component:ql}]}],Xl=Object(u["a"])({history:Object(u["b"])(),routes:Wl}),Jl=Xl,zl=Object(e["h"])(i);zl.use(b["a"]),zl.use(Jl),zl.mount("#app")},7849:function(t,l,n){t.exports=n.p+"img/three.15b713f5.png"},7900:function(t,l,n){},8784:function(t,l,n){},"88a7":function(t,l,n){"use strict";n("d57b")},c131:function(t,l,n){t.exports=n.p+"img/horizontally-vertically4.8c164e93.png"},c435:function(t,l,n){"use strict";n("7900")},c48d:function(t,l,n){t.exports=n.p+"img/horizontally-vertically2.5cd33807.png"},cd84:function(t,l,n){},d09a:function(t,l,n){"use strict";n("de8a")},d1ff:function(t,l,n){},d57b:function(t,l,n){},de8a:function(t,l,n){},f3ea:function(t,l,n){t.exports=n.p+"img/horizontal-center.6344d60d.png"},fd44:function(t,l,n){"use strict";n("8784")}});
//# sourceMappingURL=app.d42fe8c0.js.map